unlink('presentation_cache', recursive = TRUE)
## EEG Experiments
![](./figures/eeg_setting.png){width="60%"}
library(ggplot2)
library(readr)
library(forcats)
library(dplyr)
library(purrr)
library(tidyr)
library(plotrix)
library(lmerTest)
library(LMERConvenienceFunctions)
library(ggrepel)
library(rlm)
library(MASS)
fnirs_indiv  = read.csv("/home/jundurraga/pCloudDrive/Documents/Presentations/ARO2018/Analisis/fnirs_individual_ROI.csv", header = TRUE)
eeg_data = read.csv("/home/jundurraga/pCloudDrive/Documents/Presentations/ARO2018/Analisis/sym_itd.csv", header = TRUE)
fnirs_group = read.csv('/home/jundurraga/pCloudDrive/Documents/Presentations/ARO2018/Analisis/group-results-for-jaime.csv', header = TRUE)
figures_path = '/home/jundurraga/Documents/'
source("/home/jundurraga/Documents/source_code/r-tools/correlation_functions.R")
formater <- (theme_bw() +  theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
+ theme(legend.text=element_text(size=12))
+ theme(text = element_text(size=12))
+ theme(axis.line.x = element_line(color="black", size = 0.2), axis.line.y = element_line(color="black", size = 0.2))
+ theme(strip.background = element_blank())
)
# prepare eeg data --------------------------------------------------------
eeg_data$ValueType <- 'GFP'
eeg_data <- eeg_data %>%
mutate(Condition = fct_recode(ITDCat,
"\u00B1 0.5 ms" = "-0.5 / 0.5",
"\u00B1 1.0 ms" = "-1 / 1",
"\u00B1 1.5 ms" = "-1.5 / 1.5",
"\u00B1 2.0 ms" = "-2 / 2",
"\u00B1 2.5 ms" = "-2.5 / 2.5",
"\u00B1 3.0 ms" = "-3 / 3",
"\u00B1 3.5 ms" = "-3.5 / 3.5",
"\u00B1 4.0 ms" = "-4 / 4")) %>%
group_by(Condition) %>%
summarise(Value = mean(GFP), se = std.error(GFP)) %>%
mutate(ValueNorm = Value / max(Value), se_n = se / max(se))
eeg_data$MeasureType <- 'EEG'
fnirs_group <- fnirs_group %>%
filter(Condition != "Control") %>%
filter(Chroma == "hbo") %>%
mutate(Condition = fct_recode(Condition,
"\u00B1 0.5 ms" = "ITD_05",
"\u00B1 1.0 ms" = "ITD_10",
"\u00B1 1.5 ms" = "ITD_15",
"\u00B1 2.0 ms" = "ITD_20",
"\u00B1 2.5 ms" = "ITD_25",
"\u00B1 3.0 ms" = "ITD_30",
"\u00B1 3.5 ms" = "ITD_35",
"\u00B1 4.0 ms" = "ITD_40")) %>%
spread(Variable, Value) %>%
mutate(Value = ChannelStats_beta, se = ChannelStats_se, MeasureType = 'fNIRS',
ValueNorm = Value / max(Value), se_n = se / max(se))
fnirs_group
library(purrr)
library(ggplot2)
library(readr)
library(forcats)
library(dplyr)
library(purrr)
library(tidyr)
library(plotrix)
library(lmerTest)
library(LMERConvenienceFunctions)
library(ggrepel)
library(rlm)
library(MASS)
library(broom)
source("/home/jundurraga/Documents/source_code/r-tools/correlation_functions.R")
fnirs_indiv  = read.csv("/home/jundurraga/pCloudDrive/Documents/Presentations/ARO2018/Analisis/fnirs_individual_ROI.csv", header = TRUE)
eeg_data = read.csv("/home/jundurraga/pCloudDrive/Documents/Presentations/ARO2018/Analisis/sym_itd.csv", header = TRUE)
eeg_data$ValueType <- 'GFP'
eeg_data <- eeg_data %>%
mutate(Condition = fct_recode(ITDCat,
"\u00B1 0.5 ms" = "-0.5 / 0.5",
"\u00B1 1.0 ms" = "-1 / 1",
"\u00B1 1.5 ms" = "-1.5 / 1.5",
"\u00B1 2.0 ms" = "-2 / 2",
"\u00B1 2.5 ms" = "-2.5 / 2.5",
"\u00B1 3.0 ms" = "-3 / 3",
"\u00B1 3.5 ms" = "-3.5 / 3.5",
"\u00B1 4.0 ms" = "-4 / 4"),
Name=SUBJECT) %>%
group_by(Name, Condition) %>%
summarise(Value = mean(GFP)) %>%
mutate(ValueNorm = Value / max(Value), MeasureType ='EEG')
fnirs_indiv <- fnirs_indiv %>%
filter(Condition != "Control") %>%
filter(Chroma == "hbo") %>%
mutate(Condition = fct_recode(Condition,
"\u00B1 0.5 ms" = "ITD_05",
"\u00B1 1.0 ms" = "ITD_10",
"\u00B1 1.5 ms" = "ITD_15",
"\u00B1 2.0 ms" = "ITD_20",
"\u00B1 2.5 ms" = "ITD_25",
"\u00B1 3.0 ms" = "ITD_30",
"\u00B1 3.5 ms" = "ITD_35",
"\u00B1 4.0 ms" = "ITD_40")) %>%
spread(Variable, Value) %>%
mutate(Value = ChannelStats_beta, se = ChannelStats_se, MeasureType = 'fNIRS',
ValueNorm = Value / max(Value), se_n = se / max(se))
cdf <- bind_rows(list(df1=dplyr::select(eeg_data, Name, Condition, ValueNorm, MeasureType),
df2=dplyr::select(fnirs_indiv, Name, Condition, ValueNorm, MeasureType)))
rm_data <- cdf %>%
group_by(Name, Condition) %>%
filter(n() == 2 )
rm_data <- rm_data %>% group_by(Name) %>%
filter(n() == 16)
rm_data %>%
ggplot(aes(Condition, ValueNorm, color=MeasureType, group=MeasureType)) +
geom_point() +
stat_summary(geom="line") +
facet_grid(Name ~ .)
library(robust)
rm_data %>%
group_by(Name) %>%
spread(MeasureType, ValueNorm) %>%
do(model = tidy(lmRob(log(.$EEG) ~ 1 + .$fNIRS)),
dummy = robust.correlations(log(.$EEG), .$fNIRS, fit.formula='y~x', plot.fit = T,outliers.remove=F)) %>%
unnest(model, .drop = TRUE)
fnirs_indiv
fnirs_indiv
View(fnirs_indiv)
lm = lmer(Value ~ Condition + (1 | Name) data=fnirs_indiv)
lm = lmer(Value ~ Condition + (1 | Name), data=fnirs_indiv)
mcp.fnc(lm)
anoval(lm)
anova(lm)
fnirs_indiv$Condition
fnirs_indiv$ChannelStats_beta
lm = lmer(ChannelStats_beta ~ Condition + (1 | Name), data=fnirs_indiv)
mcp.fnc(lm)
anova(lm)
fnirs_indiv$ValueNorm
lm = lmer(ValueNorm ~ Condition + (1 | Name), data=fnirs_indiv)
mcp.fnc(lm)
lm = lmer(ValueNorm ~ Condition + (1 | Name), data=fnirs_indiv)
mcp.fnc(lm)
anova(lm)
rm_data %>%
spread(MeasureType, ValueNorm) %>%
ggplot(aes(log(EEG), fNIRS, label=Condition)) +
geom_point() +
geom_text_repel() +
geom_smooth(method = "rlm") +
facet_grid(Name ~ .)
fnirs_indiv %>%
gglplot(aes(Condition, Value, color=Name)) +
ggplot()
fnirs_indiv %>%
gglplot(aes(Condition, Value, color=Name)) +
geom_point()
fnirs_indiv %>%
ggplot(aes(Condition, Value, color=Name)) +
geom_point()
fnirs_indiv %>%
ggplot(aes(Condition, Value, color=Name)) +
geom_point() +
geom_point(aes(Contion, mean(Value)))
fnirs_indiv %>%
ggplot(aes(Condition, Value, color=Name)) +
geom_point() +
geom_point(aes(Condition, mean(Value)))
fnirs_indiv %>%
ggplot(aes(Condition, Value, color=Name)) +
geom_boxplot()
fnirs_indiv %>%
ggplot(aes(Condition, Value, color=Name)) +
geom_boxplot() %>%
geom_point()
fnirs_indiv %>%
ggplot(aes(Condition, Value, color=Name, fill=Name)) +
geom_boxplot() %>%
geom_point()
fnirs_indiv %>%
ggplot(aes(Condition, Value, color=Name, fill=Name)) +
geom_boxplot() %>%
geom_point()
fnirs_indiv %>%
ggplot(aes(Condition, Value, color=Name, fill= Condition)) +
geom_boxplot() %>%
geom_point()
fnirs_indiv %>%
ggplot(aes(Condition, Value, color=Name, fill=Condition)) +
geom_boxplot() %>%
geom_point()
fnirs_indiv %>%
ggplot(aes(Condition, Value, color=Name)) +
geom_boxplot( fill=Condition) %>%
geom_point()
fnirs_indiv %>%
ggplot(aes(Condition, Value, color=Name)) +
geom_boxplot() %>%
geom_point()
fnirs_indiv %>%
ggplot(aes(Condition, Value, color=Name, group=Name)) +
geom_boxplot() %>%
geom_point()
fnirs_indiv %>%
ggplot(aes(Condition, Value, color=Name, fill=Name)) +
geom_boxplot() +
geom_point()
fnirs_indiv %>%
ggplot(aes(Condition, Value, color=Name, fill=Condition)) +
geom_boxplot() +
geom_point()
fnirs_indiv %>%
ggplot(aes(Condition, Value, color=Name, group=Condition)) +
geom_boxplot() +
geom_point()
unlink('presentation_cache', recursive = TRUE)
unlink('presentation_cache', recursive = TRUE)
unlink('presentation_cache', recursive = TRUE)
unlink('presentation_cache', recursive = TRUE)
unlink('presentation_cache', recursive = TRUE)
